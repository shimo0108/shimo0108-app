// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalendarsClient is the client API for Calendars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalendarsClient interface {
	FindByCalendarID(ctx context.Context, in *FindByCalendarIDRequest, opts ...grpc.CallOption) (*FindByCalendarIDResponse, error)
	CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*CreateCalendarResponse, error)
	UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*UqdateCalendarResponse, error)
	DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*DeleteCalendarResponse, error)
	FindAllCalendars(ctx context.Context, in *FindAllCalendarsRequest, opts ...grpc.CallOption) (*FindAllCalendarsResponse, error)
}

type calendarsClient struct {
	cc grpc.ClientConnInterface
}

func NewCalendarsClient(cc grpc.ClientConnInterface) CalendarsClient {
	return &calendarsClient{cc}
}

func (c *calendarsClient) FindByCalendarID(ctx context.Context, in *FindByCalendarIDRequest, opts ...grpc.CallOption) (*FindByCalendarIDResponse, error) {
	out := new(FindByCalendarIDResponse)
	err := c.cc.Invoke(ctx, "/Calendar.Calendars/FindByCalendarID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarsClient) CreateCalendar(ctx context.Context, in *CreateCalendarRequest, opts ...grpc.CallOption) (*CreateCalendarResponse, error) {
	out := new(CreateCalendarResponse)
	err := c.cc.Invoke(ctx, "/Calendar.Calendars/CreateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarsClient) UpdateCalendar(ctx context.Context, in *UpdateCalendarRequest, opts ...grpc.CallOption) (*UqdateCalendarResponse, error) {
	out := new(UqdateCalendarResponse)
	err := c.cc.Invoke(ctx, "/Calendar.Calendars/UpdateCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarsClient) DeleteCalendar(ctx context.Context, in *DeleteCalendarRequest, opts ...grpc.CallOption) (*DeleteCalendarResponse, error) {
	out := new(DeleteCalendarResponse)
	err := c.cc.Invoke(ctx, "/Calendar.Calendars/DeleteCalendar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calendarsClient) FindAllCalendars(ctx context.Context, in *FindAllCalendarsRequest, opts ...grpc.CallOption) (*FindAllCalendarsResponse, error) {
	out := new(FindAllCalendarsResponse)
	err := c.cc.Invoke(ctx, "/Calendar.Calendars/FindAllCalendars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalendarsServer is the server API for Calendars service.
// All implementations must embed UnimplementedCalendarsServer
// for forward compatibility
type CalendarsServer interface {
	FindByCalendarID(context.Context, *FindByCalendarIDRequest) (*FindByCalendarIDResponse, error)
	CreateCalendar(context.Context, *CreateCalendarRequest) (*CreateCalendarResponse, error)
	UpdateCalendar(context.Context, *UpdateCalendarRequest) (*UqdateCalendarResponse, error)
	DeleteCalendar(context.Context, *DeleteCalendarRequest) (*DeleteCalendarResponse, error)
	FindAllCalendars(context.Context, *FindAllCalendarsRequest) (*FindAllCalendarsResponse, error)
	mustEmbedUnimplementedCalendarsServer()
}

// UnimplementedCalendarsServer must be embedded to have forward compatible implementations.
type UnimplementedCalendarsServer struct {
}

func (UnimplementedCalendarsServer) FindByCalendarID(context.Context, *FindByCalendarIDRequest) (*FindByCalendarIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByCalendarID not implemented")
}
func (UnimplementedCalendarsServer) CreateCalendar(context.Context, *CreateCalendarRequest) (*CreateCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCalendar not implemented")
}
func (UnimplementedCalendarsServer) UpdateCalendar(context.Context, *UpdateCalendarRequest) (*UqdateCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCalendar not implemented")
}
func (UnimplementedCalendarsServer) DeleteCalendar(context.Context, *DeleteCalendarRequest) (*DeleteCalendarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCalendar not implemented")
}
func (UnimplementedCalendarsServer) FindAllCalendars(context.Context, *FindAllCalendarsRequest) (*FindAllCalendarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCalendars not implemented")
}
func (UnimplementedCalendarsServer) mustEmbedUnimplementedCalendarsServer() {}

// UnsafeCalendarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalendarsServer will
// result in compilation errors.
type UnsafeCalendarsServer interface {
	mustEmbedUnimplementedCalendarsServer()
}

func RegisterCalendarsServer(s grpc.ServiceRegistrar, srv CalendarsServer) {
	s.RegisterService(&Calendars_ServiceDesc, srv)
}

func _Calendars_FindByCalendarID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByCalendarIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarsServer).FindByCalendarID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar.Calendars/FindByCalendarID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarsServer).FindByCalendarID(ctx, req.(*FindByCalendarIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendars_CreateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarsServer).CreateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar.Calendars/CreateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarsServer).CreateCalendar(ctx, req.(*CreateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendars_UpdateCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarsServer).UpdateCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar.Calendars/UpdateCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarsServer).UpdateCalendar(ctx, req.(*UpdateCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendars_DeleteCalendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarsServer).DeleteCalendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar.Calendars/DeleteCalendar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarsServer).DeleteCalendar(ctx, req.(*DeleteCalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calendars_FindAllCalendars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCalendarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalendarsServer).FindAllCalendars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Calendar.Calendars/FindAllCalendars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalendarsServer).FindAllCalendars(ctx, req.(*FindAllCalendarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Calendars_ServiceDesc is the grpc.ServiceDesc for Calendars service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calendars_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Calendar.Calendars",
	HandlerType: (*CalendarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindByCalendarID",
			Handler:    _Calendars_FindByCalendarID_Handler,
		},
		{
			MethodName: "CreateCalendar",
			Handler:    _Calendars_CreateCalendar_Handler,
		},
		{
			MethodName: "UpdateCalendar",
			Handler:    _Calendars_UpdateCalendar_Handler,
		},
		{
			MethodName: "DeleteCalendar",
			Handler:    _Calendars_DeleteCalendar_Handler,
		},
		{
			MethodName: "FindAllCalendars",
			Handler:    _Calendars_FindAllCalendars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calendar.proto",
}
