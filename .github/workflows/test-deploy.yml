name: test-deploy
on:  [push]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test with docker-compose stack
        run: |
          docker-compose up -d --build
          docker exec server go test -cover -v ./...

  flont-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Dependencies
        working-directory: ./client
        run: npm install

      - name: Build
        working-directory: ./client
        run: npm run build

      - name: Deploy  # S3にデプロイ
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./client
        run: aws s3 cp --recursive --region ap-northeast-1 dist/ s3://shimo0108-app/

      - name: Create Invalidation
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: aws cloudfront create-invalidation --region ap-northeast-1 --distribution-id E1FDOK8A4SPJSL --paths "/*"

  go-deploy:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@master
      - name: Create .env file
        run: echo "${{ secrets.GITHUBACTION_ENV }}" > .env
      - id: docker-cache-step
        uses: actions/cache@v1
        with:
          path: /tmp/saveload-cache
          key: docker-saveload-${{ hashFiles('Dockerfile') }}
      - run: docker load -i /tmp/saveload-cache/go-builder.tar || true
        if: steps.docker-cache-step.outputs.cache-hit == 'true'
      - run: docker build ./server -t thing --target builder --cache-from=thing-cache

      - run: docker build ./server --cache-from=thing-cache
      - run: docker tag thing thing-cache && mkdir -p /tmp/saveload-cache && docker save thing-cache -o /tmp/saveload-cache/go-builder.tar && ls -lh /tmp/saveload-cache || true
        if: always() && steps.docker-cache-step.outputs.cache-hit != 'true'
